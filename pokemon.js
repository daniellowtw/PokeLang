/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
<<<<<<< HEAD
symbols_: {"error":2,"expressions":3,"e":4,"ending":5,"EOF":6,"SEMICOLON":7,"POKEMON":8,"ADD":9,"!":10,"%":11,"-":12,"(":13,")":14,"NUMBER":15,"VAR":16,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"SEMICOLON",8:"POKEMON",9:"ADD",10:"!",11:"%",12:"-",13:"(",14:")",15:"NUMBER",16:"VAR"},
productions_: [0,[3,3],[5,3],[5,1],[4,3],[4,2],[4,2],[4,2],[4,3],[4,1],[4,3]],
=======
<<<<<<< Updated upstream
symbols_: {"error":2,"expressions":3,"e":4,"ending":5,"EOF":6,"SEMICOLON":7,"+":8,"-":9,"*":10,"/":11,"^":12,"!":13,"%":14,"(":15,")":16,"NUMBER":17,"E":18,"PI":19,"VAR":20,"POKEMON":21,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"SEMICOLON",8:"+",9:"-",10:"*",11:"/",12:"^",13:"!",14:"%",15:"(",16:")",17:"NUMBER",18:"E",19:"PI",20:"VAR",21:"POKEMON"},
productions_: [0,[3,3],[5,3],[5,1],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,2],[4,3],[4,1],[4,1],[4,1],[4,3]],
=======
symbols_: {"error":2,"expressions":3,"statements":4,"EOF":5,"e":6,"ending":7,"SEMICOLON":8,"POKEMON":9,"ADD":10,"ASSIGN":11,"NUMBER":12,"VAR":13,"OPPO_ARG":14,"ARG":15,"LOST":16,"HEALTH":17,"RECOVERED":18,"LET":19,"LEARNED":20,"MOVE":21,"USED":22,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SEMICOLON",9:"POKEMON",10:"ADD",11:"ASSIGN",12:"NUMBER",13:"VAR",14:"OPPO_ARG",15:"ARG",16:"LOST",17:"HEALTH",18:"RECOVERED",19:"LET",20:"LEARNED",21:"MOVE",22:"USED"},
productions_: [0,[3,2],[4,2],[7,3],[7,1],[6,3],[6,3],[6,1],[6,3],[6,2],[6,2],[6,4],[6,4],[6,4],[6,3],[6,1]],
>>>>>>> Stashed changes
>>>>>>> added subtract, assign, implementing subroutine
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
<<<<<<< Updated upstream
case 1: 
<<<<<<< HEAD
        	if ($$[$0-1] == null) { 
        		console.log($$[$0-2]);
        		return $$[$0-2];
        	}
        	else {
        		console.log(['CONCAT', $$[$0-2], $$[$0-1]]);
        		return ['CONCAT', $$[$0-2], $$[$0-1]];
        	}
		
=======
        console.log([$$[$0-2], $$[$0-1]]);
          return [$$[$0-1]]; 
=======
case 1:return $$[$0-1]
>>>>>>> added subtract, assign, implementing subroutine
break;
case 2: 
        	if ($$[$0] == null) { 
        		console.log($$[$0-1]);
        		return $$[$0-1];
        	}
        	else {
        		console.log(['CONCAT', $$[$0-1], $$[$0]]);
        		return ['CONCAT', $$[$0-1], $$[$0]];
        	}
		
>>>>>>> Stashed changes
break;
case 3: 
		if ($$[$0] == null) { 
			this.$ = $$[$0-1];
		} else {
			this.$ = ['CONCAT', $$[$0-1], $$[$0]]; 
		}
	
break;
case 4: this.$ = null
break;
<<<<<<< HEAD
case 4:
    		this.$ = ['ADD', $$[$0-2], $$[$0]];
    	
=======
case 5:this.$ = ['ADD', $$[$0-2], $$[$0]];
break;
case 6:this.$ = ['ASSIGN', $$[$0-2], $$[$0]];
break;
<<<<<<< Updated upstream
case 4:this.$ = $$[$0-2]+$$[$0];
>>>>>>> added subtract, assign, implementing subroutine
break;
case 5:
          this.$ = (function fact (n) { return n==0 ? 1 : fact(n-1) * n })($$[$0-1]);
        
break;
case 6:this.$ = $$[$0-1]/100;
break;
case 7:this.$ = -$$[$0];
break;
case 8:this.$ = $$[$0-1];
break;
case 9:this.$ = Number(yytext);
break;
case 10:console.log($$[$0-1] + " is now " +$$[$0]); this.$ = [$$[$0-2], $$[$0-1], $$[$0]]
break;
}
},
<<<<<<< HEAD
table: [{3:1,4:2,8:[1,3],12:[1,4],13:[1,5],15:[1,6],16:[1,7]},{1:[3]},{5:8,7:[1,11],10:[1,9],11:[1,10]},{9:[1,12]},{4:13,8:[1,3],12:[1,4],13:[1,5],15:[1,6],16:[1,7]},{4:14,8:[1,3],12:[1,4],13:[1,5],15:[1,6],16:[1,7]},{7:[2,9],10:[2,9],11:[2,9],14:[2,9]},{8:[1,15]},{6:[1,16]},{7:[2,5],10:[2,5],11:[2,5],14:[2,5]},{7:[2,6],10:[2,6],11:[2,6],14:[2,6]},{4:17,6:[2,3],8:[1,3],12:[1,4],13:[1,5],15:[1,6],16:[1,7]},{8:[1,18]},{7:[2,7],10:[2,7],11:[2,7],14:[2,7]},{10:[1,9],11:[1,10],14:[1,19]},{15:[1,20]},{1:[2,1]},{5:21,7:[1,11],10:[1,9],11:[1,10]},{7:[2,4],10:[2,4],11:[2,4],14:[2,4]},{7:[2,8],10:[2,8],11:[2,8],14:[2,8]},{7:[2,10],10:[2,10],11:[2,10],14:[2,10]},{6:[2,2]}],
defaultActions: {16:[2,1],21:[2,2]},
=======
table: [{3:1,4:2,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{1:[3]},{5:9,7:[1,17],8:[1,10],9:[1,11],10:[1,12],11:[1,13],12:[1,14],13:[1,15],14:[1,16]},{4:18,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{4:19,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{7:[2,13],8:[2,13],9:[2,13],10:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13],16:[2,13]},{7:[2,14],8:[2,14],9:[2,14],10:[2,14],11:[2,14],12:[2,14],13:[2,14],14:[2,14],16:[2,14]},{7:[2,15],8:[2,15],9:[2,15],10:[2,15],11:[2,15],12:[2,15],13:[2,15],14:[2,15],16:[2,15]},{21:[1,20]},{6:[1,21]},{4:22,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{4:23,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{4:24,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{4:25,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{4:26,9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{7:[2,9],8:[2,9],9:[2,9],10:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],16:[2,9]},{7:[2,10],8:[2,10],9:[2,10],10:[2,10],11:[2,10],12:[2,10],13:[2,10],14:[2,10],16:[2,10]},{4:27,6:[2,3],9:[1,3],15:[1,4],17:[1,5],18:[1,6],19:[1,7],20:[1,8]},{7:[2,11],8:[2,11],9:[2,11],10:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],16:[2,11]},{8:[1,10],9:[1,11],10:[1,12],11:[1,13],12:[1,14],13:[1,15],14:[1,16],16:[1,28]},{17:[1,29]},{1:[2,1]},{7:[2,4],8:[2,4],9:[2,4],10:[1,12],11:[1,13],12:[1,14],13:[1,15],14:[1,16],16:[2,4]},{7:[2,5],8:[2,5],9:[2,5],10:[1,12],11:[1,13],12:[1,14],13:[1,15],14:[1,16],16:[2,5]},{7:[2,6],8:[2,6],9:[2,6],10:[2,6],11:[2,6],12:[1,14],13:[1,15],14:[1,16],16:[2,6]},{7:[2,7],8:[2,7],9:[2,7],10:[2,7],11:[2,7],12:[1,14],13:[1,15],14:[1,16],16:[2,7]},{7:[2,8],8:[2,8],9:[2,8],10:[2,8],11:[2,8],12:[2,8],13:[1,15],14:[1,16],16:[2,8]},{5:30,7:[1,17],8:[1,10],9:[1,11],10:[1,12],11:[1,13],12:[1,14],13:[1,15],14:[1,16]},{7:[2,12],8:[2,12],9:[2,12],10:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],16:[2,12]},{7:[2,16],8:[2,16],9:[2,16],10:[2,16],11:[2,16],12:[2,16],13:[2,16],14:[2,16],16:[2,16]},{6:[2,2]}],
defaultActions: {21:[2,1],30:[2,2]},
=======
case 7:this.$ = Number(yytext);
break;
case 8:this.$ = [$$[$0-2], $$[$0-1], $$[$0]]
break;
case 9:this.$ = ['OPPO_ARG', $$[$0]]
break;
case 10:this.$ = ['ARG', $$[$0]]
break;
case 11:this.$ = ['SUB', $$[$0-3], $$[$0-1]]
break;
case 12:this.$ = ['ADD', $$[$0-3], $$[$0-1]]
break;
case 13:this.$ = ['LET', $$[$0-2], $$[$0]]
break;
case 14:this.$ = ['USED', $$[$0-2], $$[$0]]
break;
case 15:this.$ = ['MOVE', $$[$0]]; console.log($$[$0])
break;
}
},
table: [{3:1,4:2,6:3,9:[1,4],12:[1,5],13:[1,6],14:[1,7],15:[1,8],19:[1,9],21:[1,10]},{1:[3]},{5:[1,11]},{7:12,8:[1,13]},{10:[1,14],11:[1,15],16:[1,16],18:[1,17],22:[1,18]},{8:[2,7]},{9:[1,19]},{9:[1,20]},{9:[1,21]},{4:22,6:3,9:[1,4],12:[1,5],13:[1,6],14:[1,7],15:[1,8],19:[1,9],21:[1,10]},{8:[2,15]},{1:[2,1]},{5:[2,2],20:[2,2]},{5:[2,4],6:23,9:[1,4],12:[1,5],13:[1,6],14:[1,7],15:[1,8],19:[1,9],20:[2,4],21:[1,10]},{9:[1,24]},{9:[1,25]},{12:[1,26]},{12:[1,27]},{21:[1,28]},{12:[1,29]},{8:[2,9]},{8:[2,10]},{20:[1,30]},{7:31,8:[1,13]},{8:[2,5]},{8:[2,6]},{17:[1,32]},{17:[1,33]},{8:[2,14]},{8:[2,8]},{21:[1,34]},{5:[2,3],20:[2,3]},{8:[2,11]},{8:[2,12]},{8:[2,13]}],
defaultActions: {5:[2,7],10:[2,15],11:[2,1],20:[2,9],21:[2,10],24:[2,5],25:[2,6],28:[2,14],29:[2,8],32:[2,11],33:[2,12],34:[2,13]},
>>>>>>> Stashed changes
>>>>>>> added subtract, assign, implementing subroutine
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
<<<<<<< HEAD
case 1:/*skip comma to make it readable*/
break;
case 2:return 15
break;
case 3:return 16
break;
case 4:return 'USED'
break;
case 5:return 'IF'
break;
case 6:return 'THEN'
break;
case 7:return 'ELSE'
=======
<<<<<<< Updated upstream
case 1:return 17
>>>>>>> added subtract, assign, implementing subroutine
break;
case 8:return '*'
break;
case 9:return '/'
break;
case 10:return 12
break;
case 11:return '+'
break;
case 12:return '^'
break;
case 13:return 10
break;
case 14:return 11
break;
case 15:return 13
break;
case 16:return 14
break;
case 17:return 'PI'
break;
case 18:return 'E'
break;
case 19:return 7
break;
case 20:return 6
break;
case 21:return 8
break;
case 22:return 9
break;
case 23:return 'INVALID'
break;
}
},
<<<<<<< HEAD
rules: [/^(?:\s+)/,/^(?:,)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:(GO|TRAIN))/,/^(?:USED\b)/,/^(?:SPECIAL POWER\b)/,/^(?:IT'S SUPER EFFECTIVE\b)/,/^(?:IT HAS NO EFFECT\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:;)/,/^(?:$)/,/^(?:(Bulbasaur|Ivysaur|Venusaur|Charmander|Charmeleon|Charizard|Squirtle|Wartortle|Blastoise|Caterpie|Metapod|Butterfree|Weedle|Kakuna|Beedrill|Pidgey|Pidgeotto|Pidgeot|Rattata|Raticate|Spearow|Fearow|Ekans|Arbok|Pikachu|Raichu|Sandshrew|Sandslash|Nidoran|Nidorina|Nidoqueen|Nidorino|Nidoking|Clefairy|Clefable|Vulpix|Ninetales|Jigglypuff|Wigglytuff|Zubat|Golbat|Oddish|Gloom|Vileplume|Paras|Parasect|Venonat|Venomoth|Diglett|Dugtrio|Meowth|Persian|Psyduck|Golduck|Mankey|Primeape|Growlithe|Arcanine|Poliwag|Poliwhirl|Poliwrath|Abra|Kadabra|Alakazam|Machop|Machoke|Machamp|Bellsprout|Weepinbell|Victreebel|Tentacool|Tentacruel|Geodude|Graveler|Golem|Ponyta|Rapidash|Slowpoke|Slowbro|Magnemite|Magneton|Farfetchd|Doduo|Dodrio|Seel|Dewgong|Grimer|Muk|Shellder|Cloyster|Gastly|Haunter|Gengar|Onix|Drowzee|Hypno|Krabby|Kingler|Voltorb|Electrode|Exeggcute|Exeggutor|Cubone|Marowak|Hitmonlee|Hitmonchan|Lickitung|Koffing|Weezing|Rhyhorn|Rhydon|Chansey|Tangela|Kangaskhan|Horsea|Seadra|Goldeen|Seaking|Staryu|Starmie|MrMime|Scyther|Jynx|Electabuzz|Magmar|Pinsir|Tauros|Magikarp|Gyarados|Lapras|Ditto|Eevee|Vaporeon|Jolteon|Flareon|Porygon|Omanyte|Omastar|Kabuto|Kabutops|Aerodactyl|Snorlax|Articuno|Zapdos|Moltres|Dratini|Dragonair|Dragonite|Mewtwo|Meowth))/,/^(?:(tackle|TACKLE))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"inclusive":true}}
=======
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:GO\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:;)/,/^(?:$)/,/^(?:(Bulbasaur|Ivysaur|Venusaur|Charmander|Charmeleon|Charizard|Squirtle|Wartortle|Blastoise|Caterpie|Metapod|Butterfree|Weedle|Kakuna|Beedrill|Pidgey|Pidgeotto|Pidgeot|Rattata|Raticate|Spearow|Fearow|Ekans|Arbok|Pikachu|Raichu|Sandshrew|Sandslash|Nidoran|Nidorina|Nidoqueen|Nidorino|Nidoking|Clefairy|Clefable|Vulpix|Ninetales|Jigglypuff|Wigglytuff|Zubat|Golbat|Oddish|Gloom|Vileplume|Paras|Parasect|Venonat|Venomoth|Diglett|Dugtrio|Meowth|Persian|Psyduck|Golduck|Mankey|Primeape|Growlithe|Arcanine|Poliwag|Poliwhirl|Poliwrath|Abra|Kadabra|Alakazam|Machop|Machoke|Machamp|Bellsprout|Weepinbell|Victreebel|Tentacool|Tentacruel|Geodude|Graveler|Golem|Ponyta|Rapidash|Slowpoke|Slowbro|Magnemite|Magneton|Farfetchd|Doduo|Dodrio|Seel|Dewgong|Grimer|Muk|Shellder|Cloyster|Gastly|Haunter|Gengar|Onix|Drowzee|Hypno|Krabby|Kingler|Voltorb|Electrode|Exeggcute|Exeggutor|Cubone|Marowak|Hitmonlee|Hitmonchan|Lickitung|Koffing|Weezing|Rhyhorn|Rhydon|Chansey|Tangela|Kangaskhan|Horsea|Seadra|Goldeen|Seaking|Staryu|Starmie|MrMime|Scyther|Jynx|Electabuzz|Magmar|Pinsir|Tauros|Magikarp|Gyarados|Lapras|Ditto|Eevee|Vaporeon|Jolteon|Flareon|Porygon|Omanyte|Omastar|Kabuto|Kabutops|Aerodactyl|Snorlax|Articuno|Zapdos|Moltres|Dratini|Dragonair|Dragonite|Mewtwo|Meowth))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"inclusive":true}}
=======
case 1:/*skip comma to make it readable*/
break;
case 2:/*skip lines ending with a period*/
break;
case 3:return 12
break;
case 4:return 13
break;
case 5:return 14
break;
case 6:return 15
break;
case 7:return 16
break;
case 8:return 18
break;
case 9:return 17
break;
case 10:return 22
break;
case 11:return 'IF'
break;
case 12:return 19
break;
case 13:return 20
break;
case 14:return 'THEN'
break;
case 15:return 'ELSE'
break;
case 16:return '*'
break;
case 17:return '/'
break;
case 18:return '-'
break;
case 19:return '+'
break;
case 20:return '^'
break;
case 21:return '!'
break;
case 22:return '%'
break;
case 23:return '('
break;
case 24:return ')'
break;
case 25:return 'PI'
break;
case 26:return '{'
break;
case 27:return '}'
break;
case 28:return 'E'
break;
case 29:return 8
break;
case 30:return 5
break;
case 31:return 9
break;
case 32:return 10
break;
case 33:return 11
break;
case 34:return 21
break;
case 35:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:,)/,/^(?:(.*?)(\.))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:(GO|TRAIN))/,/^(?:SENT OUT\b)/,/^(?:SWAP OUT\b)/,/^(?:LOST\b)/,/^(?:RECOVERED\b)/,/^(?:HEALTH\b)/,/^(?:USED\b)/,/^(?:SPECIAL POWER\b)/,/^(?:CHALLENGE TRAINER\b)/,/^(?:LEARNED\b)/,/^(?:IT'S SUPER EFFECTIVE\b)/,/^(?:IT HAS NO EFFECT\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:\{)/,/^(?:\})/,/^(?:E\b)/,/^(?:;)/,/^(?:$)/,/^(?:(Bulbasaur|Ivysaur|Venusaur|Charmander|Charmeleon|Charizard|Squirtle|Wartortle|Blastoise|Caterpie|Metapod|Butterfree|Weedle|Kakuna|Beedrill|Pidgey|Pidgeotto|Pidgeot|Rattata|Raticate|Spearow|Fearow|Ekans|Arbok|Pikachu|Raichu|Sandshrew|Sandslash|Nidoran|Nidorina|Nidoqueen|Nidorino|Nidoking|Clefairy|Clefable|Vulpix|Ninetales|Jigglypuff|Wigglytuff|Zubat|Golbat|Oddish|Gloom|Vileplume|Paras|Parasect|Venonat|Venomoth|Diglett|Dugtrio|Meowth|Persian|Psyduck|Golduck|Mankey|Primeape|Growlithe|Arcanine|Poliwag|Poliwhirl|Poliwrath|Abra|Kadabra|Alakazam|Machop|Machoke|Machamp|Bellsprout|Weepinbell|Victreebel|Tentacool|Tentacruel|Geodude|Graveler|Golem|Ponyta|Rapidash|Slowpoke|Slowbro|Magnemite|Magneton|Farfetchd|Doduo|Dodrio|Seel|Dewgong|Grimer|Muk|Shellder|Cloyster|Gastly|Haunter|Gengar|Onix|Drowzee|Hypno|Krabby|Kingler|Voltorb|Electrode|Exeggcute|Exeggutor|Cubone|Marowak|Hitmonlee|Hitmonchan|Lickitung|Koffing|Weezing|Rhyhorn|Rhydon|Chansey|Tangela|Kangaskhan|Horsea|Seadra|Goldeen|Seaking|Staryu|Starmie|MrMime|Scyther|Jynx|Electabuzz|Magmar|Pinsir|Tauros|Magikarp|Gyarados|Lapras|Ditto|Eevee|Vaporeon|Jolteon|Flareon|Porygon|Omanyte|Omastar|Kabuto|Kabutops|Aerodactyl|Snorlax|Articuno|Zapdos|Moltres|Dratini|Dragonair|Dragonite|Mewtwo|Meowth))/,/^(?:(tackled|TACKLED))/,/^(?:(scratched|SCRATCHED))/,/^(?:(.*)?!)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
>>>>>>> Stashed changes
>>>>>>> added subtract, assign, implementing subroutine
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}